#!/command/with-contenv bash

source /assets/functions/00-container
prepare_service
PROCESS_NAME="invoiceninja"

check_service_initialized init 20-php-fpm

### Check if New Install
if [ ! -f "${NGINX_WEBROOT}"/server.php ]; then
    print_warn "Potential New Installation / Standalone Installation Detected - Copying Invoice Ninja Sourcecode"
    cp -R /assets/install/* "${NGINX_WEBROOT}"

    ### If running with /www/html or NGINX_WEBROOT mapped, then create persistent storage
    ### Storage redirection
    if [ -d "/data" ]; then
        print_warn "Detected /data directory. Persistently saving settings/sessions/cache/uploads/modules"
        if [ ! -d "/data/storage" ]; then
            cp -R "${NGINX_WEBROOT}"/storage /data
        fi
        if [ ! -d "/data/Modules" ]; then
            cp -R "${NGINX_WEBROOT}"/Modules /data
        fi
        rm -rf "${NGINX_WEBROOT}"/storage
        ln -s /data/storage "${NGINX_WEBROOT}"/storage
        rm -rf "${NGINX_WEBROOT}"/Modules
        ln -s /data/Modules "${NGINX_WEBROOT}"/Modules
        ln -sf /data/config "${NGINX_WEBROOT}"/.env
        touch /data/config
        chown "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"/.env
        ln -sf /data/.invoiceninja-version "${NGINX_WEBROOT}"/.invoiceninja-version
        chown -R "${NGINX_USER}":"${NGINX_GROUP}" /data
    fi

    ### Auto Upgrade functionality
    if [ ! -f "${NGINX_WEBROOT}/.invoiceninja-version" ]; then
        echo "${INVOICENINJFA_VERSION} first installed on $(date)" >> "${NGINX_WEBROOT}"/.invoiceninja-version
    fi
    chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"
else
    if [ "${ENABLE_AUTO_UPDATE,,}" = "true" ]; then
        if [ "${INVOICENINJA_VERSION}" != $(head -n 1 "${NGINX_WEBROOT}"/.invoiceninja-version | awk '{print $1'}) ]; then
        print_warn "Detected in place Invoice Ninja version $(head -n 1 "${NGINX_WEBROOT}"/.invoiceninja-version | awk "{print $1"}) - Upgrading to ${INVOICENINJA_VERSION}"
            cp -R /assets/install/* "${NGINX_WEBROOT}"
            chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"
            cd "${NGINX_WEBROOT}"|| exit
#            silent sudo -u "${NGINX_USER}" php artisan freescout:after-app-update
            sed -i --follow-symlinks "1 i\
            ${INVOICENINJA_VERSION} upgraded on $(date)" /www/html/.invoiceninja-version
        fi
    fi
fi

### Logfile redirection
mkdir -p /www/logs/invoiceninja
chown -R "${NGINX_USER}":"${NGINX_GROUP}" /www/logs/invoiceninja
rm -rf "${NGINX_WEBROOT}"/storage/logs
ln -sf /www/logs/invoiceninja "${NGINX_WEBROOT}"/storage/logs

#### Copy over any custom modules overtop of existing
#if [ -d "/assets/modules" ]; then
#    print_warn "Detected Custom Modules - Adding to application"
#    cp -R /assets/modules/* "${NGINX_WEBROOT}"/Modules/
#    chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"/Modules/
#fi
#
custom_files "${CONTAINER_CUSTOM_PATH}" "${NGINX_WEBROOT}" "${NGINX_USER}" "${NGINX_GROUP}"
custom_scripts

#### Dynamically Create Configuration
if grep -q "APP_URL" "${NGINX_WEBROOT}"/.env > /dev/null 2>&1; then
    if [ "${SETUP_TYPE,,}" = "auto" ]; then
        sanity_db
        sanity_var SITE_URL "Site URL"
        db_ready mariadb

        print_info "Auto Configuring based on Environment Variables"
        # Proxy and Host Settings
        if [ -z "${SITE_URL}" ]; then
            if [ -n "${APP_URL}" ]; then
                sed -i --follow-symlinks "s#APP_URL=.*#APP_URL=${APP_URL}#g" "${NGINX_WEBROOT}"/.env
            fi
        else
            sed -i --follow-symlinks "s#APP_URL=.*#APP_URL=${SITE_URL}#g" "${NGINX_WEBROOT}"/.env
        fi

        if var_true "${ENABLE_SSL_PROXY}" || var_true "${APP_FORCE_HTTPS}" || var_true "${REQUIRE_HTTPS}" ; then
            sed -i --follow-symlinks "s#REQUIRE_HTTPS=.*#REQUIRE_HTTPS=true#g" "${NGINX_WEBROOT}"/.env
#            sed -i --follow-symlinks "s#SESSION_SECURE_COOKIE=.*#SESSION_SECURE_COOKIE=true#g" "${NGINX_WEBROOT}"/.env
        else
            sed -i --follow-symlinks "s#REQUIRE_HTTPS=.*#REQUIRE_HTTPS=false#g" "${NGINX_WEBROOT}"/.env
#            sed -i --follow-symlinks "s#SESSION_SECURE_COOKIE=.*#SESSION_SECURE_COOKIE=false#g" "${NGINX_WEBROOT}"/.env
        fi
#
#        if var_true "${APP_DEBUG}" || var_true "${DISPLAY_ERRORS}" ; then
#            sed -i --follow-symlinks "s#APP_DEBUG=.*#APP_DEBUG=true#g" "${NGINX_WEBROOT}"/.env
#        else
#            sed -i --follow-symlinks "s#APP_DEBUG=.*#APP_DEBUG=false#g" "${NGINX_WEBROOT}"/.env
#        fi
#
        sed -i --follow-symlinks "s#DB_HOST=.*#DB_HOST=${DB_HOST}#g" "${NGINX_WEBROOT}"/.env
        sed -i --follow-symlinks "s#DB_PORT=.*#DB_PORT=${DB_PORT}#g" "${NGINX_WEBROOT}"/.env
        sed -i --follow-symlinks "s#DB_DATABASE=.*#DB_DATABASE=${DB_NAME}#g" "${NGINX_WEBROOT}"/.env
        sed -i --follow-symlinks "s#DB_USERNAME=.*#DB_USERNAME=${DB_USER}#g" "${NGINX_WEBROOT}"/.env
        sed -i --follow-symlinks "s#DB_PASSWORD=.*#DB_PASSWORD=${DB_PASS}#g" "${NGINX_WEBROOT}"/.env
#
    else
        print_info "Skipping Auto configuration and using in place .env"
    fi
    if [ -f /data/config ]; then
        chown "${NGINX_USER}":"${NGINX_GROUP}" /data/config
        chmod 0755 /data/config
    fi
else
    ### Sanity Test
    sanity_db
    sanity_var SITE_URL "Site URL"
    db_ready mariadb

    print_info "Generating Configuration"
    touch "${NGINX_WEBROOT}"/.env
    chown "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"/.env
    echo "#### Automatically Generated File - Upon container restart any settings will reset!" | silent sudo -u "${NGINX_USER}" tee "${NGINX_WEBROOT}"/.env
    # Proxy and HostSettings
    if [ -z "${SITE_URL}" ]; then
        if [ -n "${APP_URL}" ]; then
            echo "APP_URL=$APP_URL" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
        fi
    else
        echo "APP_URL=$SITE_URL" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    fi

    if var_true "${ENABLE_SSL_PROXY}" || var_true "${APP_FORCE_HTTPS}" || var_true "${REQUIRE_HTTPS}" ; then
        echo "REQUIRE_HTTPS=true" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
#        echo "SESSION_SECURE_COOKIE=true" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    else
        echo "REQUIRE_HTTPS=false" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
#        echo "SESSION_SECURE_COOKIE=false" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    fi
#
#    if [ -n "${APP_PROXY}" ] ; then
#        echo "APP_PROXY=${APP_PROXY}" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
#    fi
#
    if var_true "${APP_DEBUG}" || var_true "${DISPLAY_ERRORS}" ; then
        echo "APP_DEBUG=true" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    else
        echo "APP_DEBUG=false" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    fi

    echo "APP_KEY=" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
#
    # Set DB Settings
    echo "DB_CONNECTION=mysql" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    echo "DB_HOST=$DB_HOST" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    echo "DB_PORT=$DB_PORT" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    echo "DB_DATABASE=$DB_NAME" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    echo "DB_USERNAME=$DB_USER" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    echo "DB_PASSWORD=$DB_PASS" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env

    echo "TRUSTED_PROXIES=*" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    echo "NINJA_ENVIRONMENT=selfhost" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env

    echo "LOG=single" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    echo "APP_LOCALE=${LANGUAGE}" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    echo "MAIL_MAILER=log" | silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    echo "SNAPPDF_EXECUTABLE_PATH=${SNAPPDF_EXECUTIBLE_PATH}" silent sudo -u "${NGINX_USER}" tee -a "${NGINX_WEBROOT}"/.env
    # Generate Key
    cd "${NGINX_WEBROOT}"/
    chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"/config
    if [ -f /data/config ]; then
        chown "${NGINX_USER}":"${NGINX_GROUP}" /data/config
        chmod 0755 /data/config
    fi
    silent sudo -u "${NGINX_USER}" php artisan key:generate
fi

### Cleanup
cd "${NGINX_WEBROOT}"/
#silent sudo -u "${NGINX_USER}" php artisan freescout:clear-cache
silent sudo -u "${NGINX_USER}" php artisan optimize
silent sudo -u "${NGINX_USER}" php artisan storage:link

### Check to see if DB is populated
mysql -u $DB_USER -p$DB_PASS -h$DB_HOST -P$DB_PORT -e "use "$DB_NAME"; SELECT * FROM users;" > /dev/null 2>&1
if [ $? -gt 0 ]; then
    ### Perform Database Installtion Routines
    print_warn "Detected empty Database - Setting up - Please wait.."
    sleep 5
    silent sudo -u "${NGINX_USER}" php artisan migrate:fresh --force
#    silent sudo -u "${NGINX_USER}" php artisan freescout:clear-cache
#
    sanity_var ADMIN_EMAIL "Admin Email Address"
    sanity_var ADMIN_PASS "Admin Password"
#
#    ### Create User
#    print_warn "Creating Administrative User"
    cd "${NGINX_WEBROOT}"
    silent sudo -u "${NGINX_USER}" php artisan -n ninja:create-account --email="${ADMIN_EMAIL}" --password="${ADMIN_PASS}"
fi

cd "${NGINX_WEBROOT}"
chown -R "${NGINX_USER}":"${NGINX_GROUP}" storage bootstrap/cache public/css public/js
chmod -R ug+rwx storage bootstrap/cache public/css public/js
chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"
chmod ug+rwx "${NGINX_WEBROOT}"

if [ ! -f "/tmp/.container/container-restart" ] ; then
    ### Add alias for running artisan
    cat >> /root/.bashrc <<EOF
    function artisan() {
        export oldpwd="\$(pwd)"
        cd ${NGINX_WEBROOT}
        sudo -u ${NGINX_USER} php artisan "\$@"
        cd "\${oldpwd}"
    }
EOF
fi

cd "${NGINX_WEBROOT}"
silent sudo -u "${NGINX_USER}" php artisan view:clear
silent sudo -u "${NGINX_USER}" php artisan view:cache
silent sudo -u "${NGINX_USER}" php artisan optimize

cat <<EOF > "${CONTAINER_SCHEDULING_LOCATION}"/invoiceninja-schedule
# Hardcoded in image in /etc/cont-init.d/$(basename "$0")
# Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')

* * * * * sudo -u ${NGINX_USER} TZ=${TIMEZONE} LD_PRELOAD=/usr/lib/preloadable_libiconv.so php ${NGINX_WEBROOT}/artisan schedule:run >> /dev/null 2>&1
EOF

print_info "Initialization Complete. Please visit ${SITE_URL} and login with your credentials.."

liftoff
